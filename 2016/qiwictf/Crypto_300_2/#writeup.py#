Python 2.7.9 (default, Mar  1 2015, 12:57:24) 
[GCC 4.9.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> from  pwn import *
>>> import time
>>> import sys
>>> import random
>>> import re
>>> from Crypto.PublicKey import RSA
>>> import gmpy
>>> from Crypto.PublicKey import RSA
>>> from libnum import *
>>> 
>>> 
>>> p=6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042047
>>> def egcd(a,b):
...     '''
...     Extended Euclidean Algorithm
...     returns x, y, gcd(a,b) such that ax + by = gcd(a,b)
...     '''
...     u, u1 = 1, 0
...     v, v1 = 0, 1
...     while b:
...         q = a // b
...         u, u1 = u1, u - q * u1
...         v, v1 = v1, v - q * v1
...         a, b = b, a - q * b
...     return u, v, a
... 
>>> def modInverse(e,n):
...     '''
...     d such that de = 1 (mod n)
...     e must be coprime to n
...     this is assumed to be true
...     '''
...     return egcd(e,n)[0]%n
... 
>>> modInverse(73,p-1)
1010177309790195671885714212193591146590911123469289912020268327951639755690472717430278200546821491127331167397611962735556799389941179927471028349773459L
>>> q=modInverse(73,p-1)
>>> (q*219*146) % (p-1
... )
438L
>>> q*219*73
16149704651615858206436913110338941660548896130903537823468029758962864774223587333557857592142035178652643373185622448253346551846989643500479330227828289033L
>>> (q*219*73) % (p-1)
219L
>>> q
1010177309790195671885714212193591146590911123469289912020268327951639755690472717430278200546821491127331167397611962735556799389941179927471028349773459L
>>> (q*219*73) % (p-1)
219L
>>> (q*219*146) % (p-1)
438L
>>> ga=2^219
>>> ga
217
>>> ga=2**219
>>> ga
842498333348457493583344221469363458551160763204392890034487820288L
>>> ga*ga % p
709803441694928604052074031140629428079727891296209043243642772637343054798240159498233447962659731992932150006119314388217384402944L
>>> 
