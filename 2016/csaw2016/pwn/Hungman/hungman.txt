void *sub_400F2D()
{
  void *v0; // ST10_8@3
  void *v1; // ST18_8@3
  void *result; // rax@3
  __int64 v3; // rbx@3
  int v4; // [sp+Ch] [bp-124h]@1
  char *v5; // [sp+10h] [bp-120h]@1
  char s; // [sp+20h] [bp-110h]@1
  __int64 v7; // [sp+118h] [bp-18h]@1

  v7 = *MK_FP(__FS__, 40LL);
  write(1, "What's your name?\n", 0x12uLL);
  memset(&s, 0, 0xF8uLL);
  v4 = read(0, &s, 0xF7uLL);
  v5 = strchr(&s, 10);
  if ( v5 )
    *v5 = 0;
  v0 = malloc(v4);
  v1 = malloc(0x80uLL);
  memset(v1, 0, 0x80uLL);
  *((_QWORD *)v1 + 1) = v0;
  *((_DWORD *)v1 + 1) = v4;
  memcpy(*((void **)v1 + 1), &s, v4);
  result = v1;
  v3 = *MK_FP(__FS__, 40LL) ^ v7;
  return result;
}

void __fastcall sub_400B3A(__int64 a1, int a2)
{
  char v2; // [sp+1Ah] [bp-46h]@5
  char v3; // [sp+1Bh] [bp-45h]@29
  int v4; // [sp+1Ch] [bp-44h]@5
  int v5; // [sp+20h] [bp-40h]@5
  int v6; // [sp+24h] [bp-3Ch]@1
  int v7; // [sp+28h] [bp-38h]@17
  int v8; // [sp+2Ch] [bp-34h]@30
  unsigned __int64 i; // [sp+30h] [bp-30h]@2
  unsigned __int64 j; // [sp+38h] [bp-28h]@6
  unsigned __int64 k; // [sp+40h] [bp-20h]@17
  void *buf; // [sp+48h] [bp-18h]@1
  void *s; // [sp+50h] [bp-10h]@30
  char *v14; // [sp+58h] [bp-8h]@30

  v6 = *(_DWORD *)(a1 + 4);
  buf = malloc(v6);
  if ( buf )
  {
    read(a2, buf, v6);
    for ( i = 0LL; v6 - 1 > i; ++i )
    {
      *((_BYTE *)buf + i) ^= *(_BYTE *)(*(_QWORD *)(a1 + 8) + i);
      *((_BYTE *)buf + i) = *((_BYTE *)buf + i) % 0x1Au + 97;
    }
    v4 = 3;
    v5 = 0;
    v2 = 95;
    while ( v4 > 0 )
    {
      for ( j = 0LL; v6 - 1 > j; ++j )
      {
        if ( *(_BYTE *)(a1 + *((_BYTE *)buf + j) - 97 + 16) )
          write(1, (char *)buf + j, 1uLL);
        else
          write(1, "_", 1uLL);
      }
      write(1, "\n", 1uLL);
      __isoc99_scanf(" %c", &v2);
      if ( v2 > 96 && v2 <= 122 )
      {
        if ( *(_BYTE *)(a1 + v2 - 97 + 16) )
        {
          puts("nope");
          --v4;
        }
        else
        {
          v7 = v5;
          for ( k = 0LL; v6 - 1 > k; ++k )
          {
            if ( *((_BYTE *)buf + k) == v2 )
            {
              *(_BYTE *)(a1 + v2 - 97 + 16) = 1;
              ++v5;
            }
          }
          if ( v7 == v5 )
            --v4;
          if ( v6 - 1 <= v5 )
          {
            *(_DWORD *)a1 = (signed int)floor((double)(v6 - 1) * 0.25 * 32.0 + (double)*(signed int *)a1);
            goto LABEL_28;
          }
        }
      }
      else
      {
        puts("nope");
        --v4;
      }
    }
    *(_DWORD *)a1 = (signed int)floor((double)(v6 - 1) * 0.25 * (double)v5 + (double)*(signed int *)a1);
LABEL_28:
    if ( *(_DWORD *)a1 > dword_602300 )
    {
      puts("High score! change name?");
      __isoc99_scanf(" %c", &v3);
      if ( v3 == 121 )
      {
        s = malloc(0xF8uLL);
        memset(s, 0, 0xF8uLL);
        v8 = read(0, s, 0xF8uLL);
        *(_DWORD *)(a1 + 4) = v8;
        v14 = strchr((const char *)s, 10);
        if ( v14 )
          *v14 = 0;
        memcpy(*(void **)(a1 + 8), s, v8);
        free(s);
      }
      snprintf(byte_602100, 0x200uLL, "Highest player: %s", *(_QWORD *)(a1 + 8));
      dword_602300 = *(_DWORD *)a1;
    }
    memset((void *)(a1 + 16), 0, 0x1AuLL);
    free(buf);
  }
}


int __fastcall main(__int64 a1, char **a2, char **a3)
{
  __int64 v3; // rax@3
  char v5; // [sp+Bh] [bp-5h]@4
  int fd; // [sp+Ch] [bp-4h]@1

  setvbuf(stdout, 0LL, 2, 0LL);
  memset(byte_602100, 0, 0x200uLL);
  memcpy(byte_602100, "Default Highscore ", 0x14uLL);
  dword_602300 = 64;
  fd = open("/dev/urandom", 0);
  if ( fd == -1 )
    exit(1);
  LODWORD(v3) = sub_400F2D();
  qword_6020E0 = v3;
  printf("Welcome %s\n", *(_QWORD *)(v3 + 8));
  do
  {
    sub_400B3A(qword_6020E0, (unsigned int)fd);
    printf("%s ", byte_602100);
    printf("score: %d\n", (unsigned int)dword_602300);
    printf("Continue? ");
    __isoc99_scanf(" %c", &v5);
  }
  while ( v5 != 110 );
  return close(fd);
}

